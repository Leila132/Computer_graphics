Задание 1.

Произвести отображение граней модели teapot.obj в виде треугольников. Изображение представить в виде numpy массива размерности (N,N,3).
- Использовать только x и y координаты вершины.
- Координаты модели необходимо масштабировать до размера изображения. 
- Точка (0,0) модели должна совпадать с центром изображения.
- Для отображения сторон треугольников использовать алгоритм Брезенхема, реализованный в виде отдельной функции.
- Цвет фона задать самим.
- Цвет пикселей линий задать в зависимости от расстония между пикселем и центром изображения. Воспользоваться формулой: color = base_color * (1 - d/N), где d - расстояние от пикселя до центра изображения, N - размер стороны изображения, base_color - базовый цвет максимальной интенсивности (например красный (255, 0,0), либо желтый (255, 255, 0), либо другой на выбор). 
- Построенное изображение отобразить и сохранить в файл.

Задание 2.

Произвести отображение граней модели teapot.obj в виде треугольников. Изображение представить в виде numpy массива размерности (N,N,3).
- Использовать только x и y координаты вершины.
- Координаты модели необходимо масштабировать до размера изображения. 
- Точка (0,0) модели должна совпадать с центром изображения.
- Для отображения сторон треугольников использовать алгоритм Брезенхема, реализованный в виде отдельной функции.
- Цвет фона задать самим.
- Цвет пикселей линий задать в зависимости от расстония между пикселем и центром изображения. Воспользоваться формулой: color = base_color * (1 - d/N), где d - расстояние от пикселя до центра изображения, N - размер стороны изображения, base_color - базовый цвет максимальной интенсивности (например красный (255, 0,0), либо желтый (255, 255, 0), либо другой на выбор). 
- Построенное изображение отобразить и сохранить в файл.

Задание 3.

Реализовать анимацию движения геометрической фигуры.
Равносторонний треугольник движется в области между кругом и квадратом. Круг находится внутри квадрата. Начальное положение и направление движения треугольника задаются случайно, но при этом необходимо обеспечить полное нахождение треугольника между кругом и квадратом. Треугольник совершает поступательное и вращательное движения. 
В процессе движения треугольник периодически сталкивается с границами круга и квадрата. При столкновении треугольник случайно меняет направление движения, но при этом движение продолжается в области между кругом и квадратом. 
Во время вращательного движения треугольник плавно меняет свой размер. За каждый нечетный поворот размер увеличивается в 2 раза, а за каждый четный поворот уменьшается в 2 раза. 
У каждой фигуры изначально задается свой цвет. При столкновении происходит обмен цветами между фигурами. 

- Размеры фигур, скорость движения и вращения определяются студентом самостоятельно.
- Для реализации движения, вращения и масштабирования использовать матрицы аффинного преобразования.
- Сохранить анимацию в виде видеофайла, либо gif изображения. 
- Анимация должна демонстрировать движение треугольника и несколько столкновений.

- Опционально вместо треугольника можно использовать модель teapot.obj или другую. 
- Опционально направление движения можно расчитывать не случайно, а из равнества углов падения и отражения.

Задание 4

Построить анимацию замкнутой кривой с помощью кривых Безье 2-го порядка. N контрольных точек кривых Безье, образующих замкнутую кривую, находятся равномерно на окужности радиуса R. Точки, в которых кривые Безье соединяются, вычисляются как полусумма соседних контрольных точек. 
В процессе анимации контрольные точки движутся вдоль радиальных направлений. Они удаляются от центра окружности на расстояние 1.5R и приближаются к центру окружности на расстояние 0.5R. При этом четные и нечетные точки движутся по отношению к центру в разных направлениях. 
Значение параметров из задания определить самостоятельно. Для создания анимации воспользоваться функцией ArtistAnimation, либо FuncAnimation.

Задание 5

Произвести рендеринг трехмерной модели. В процедуре рендеринге предусмотреть реализацию следующих требований:

1. Матрицы перехода между системами координат:
	- Mo2w - матрица перехода между системой координат модели и мировой системой координат . Представить в виде произведения трех матриц RTS (вращения, переноса, масштабирования). 
		Матрица вращения представлена в виде произведения 3 матриц поворота вокруг базисных осей. Построить матрицу таким образом, чтобы был осуществлен поворот вокруг оси Ox на 8 градусов, вокруг  оси Oy на 12 и вокруг оси OZ на 16 гардусов.
		Матрица переноса построена на основе векторе (-1, 0, -1)
		Матрица масштабирования осуществляет изменени масштаба в 0.9 раз.
	- Mw2c - матрица перехода между мировой системой координат и системой координат камеры.
		Камера располагается в точке (2,2,2) и смотрит в точку (-2,-2,0)
	- Mproj - матрица проекции (перспектиная/ортографическая)
		Выбрать параметры пирамиды отсечения таким образом, чтобы модель полностью попадала в неё
	- Mviewport - матрица перехода в систему координат области вывода (ViewPort)
		Предусмсотреть учет параметров области вывода (левая нижняя точка, размеры) при задании матрицы. По умолчанию область вывода занимает все графическое окно. Размер графического окна 1024x1024
	- При переходе от одной системы координат к другой, матрица перехода умножается на вектор из координат вершины. Для нормалей при переходе используется обратная, транспонировання матрица, которая умножается на вектор координат нормали.

2. Отсечение невидимых и пересекающихся фрагментов модели:
	- Проверка скалярного произведения вектора нормали к грани с вектором направленным от грани к камере
	- Проверка с использованием z-buffer для пересекающихся фрагментов модели

3. Наложение текстуры:
	- Расчет цвета пикселя (попавшего в спроецированную грань) на основе его барицентричесх координат (a,b,c) относительно спроецированных вершин граней P0, P1, P2. Барицентрические координаты пикселя используются для интерполяции текстурных координат пикселя на основе текстурных координат вершин грани:
	(u,v) = a*(u0,v0) + b*(u1,v1) + c*(u2,v2). 
	Цвет пикселя берется из текстуры (изобржения) по индексам, расчитаным на основе текстурных координат: 
	i = u*w
	j = v*h
	При этом необходимо учесть раположение точки начала отсчета в текстурных координатах.
	- Вычисление барицентрических координат можно осуществить с помощью отношения определителей, составленных из координат вершин грани и координат рассматриваемой точки.
	
4. Анимация:
	- Представить анимацию облёта объекта камерой, направленной в центральную точку объекта. Камера в каждый момент облёта находится на определённой высоте (например 3) и на опредленном расстоянии (например 4) от центра объекта. 

5. Получаемые изображения:
	- Рендеринг проволочной модели. Отображаются только проекции ребер модели.
	- Рендеринг модели с гранями. Цвет грани задать в полутоновом виде (серый цвет). Интенсивность цвета определить на основе проверки на видимость грани.
	- Рендеринг модели с текстурой.
	- Анимация облета модели камерой.